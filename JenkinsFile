pipeline {
    agent any

    environment {
        KUBECTL = './kubectl'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git credentialsId: 'github-creds', url: 'https://github.com/1chirag/Sigma-Assignment.git', branch: 'main'
            }
        }

        stage('Install Kubectl') {
            steps {
                sh '''
                    echo "Installing kubectl locally..."
                    curl -LO "https://dl.k8s.io/release/v1.32.0/bin/linux/amd64/kubectl"
                    chmod +x kubectl
                    ./kubectl version --client
                '''
            }
        }

        stage('Create Secrets') {
            steps {
                sh '''
                    ${KUBECTL} delete secret postgres-secret --ignore-not-found
                    ${KUBECTL} create secret generic postgres-secret \
                      --from-literal=POSTGRES_DB=wordpress \
                      --from-literal=POSTGRES_USER=wpuser \
                      --from-literal=POSTGRES_PASSWORD=wppassword

                    ${KUBECTL} delete secret pgadmin-secret --ignore-not-found
                    ${KUBECTL} create secret generic pgadmin-secret \
                      --from-literal=PGADMIN_DEFAULT_PASSWORD=admin123
                '''
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                    ${KUBECTL} apply -f kubernetes/postgres/postgres-pvc.yaml
                    ${KUBECTL} apply -f kubernetes/postgres/postgres-deployment.yaml
                    ${KUBECTL} apply -f kubernetes/postgres/postgres-service.yaml

                    ${KUBECTL} apply -f kubernetes/pgadmin/pgadmin-pvc.yaml
                    ${KUBECTL} apply -f kubernetes/pgadmin/pgadmin-configmap.yaml
                    ${KUBECTL} apply -f kubernetes/pgadmin/pgadmin-deployment.yaml
                    ${KUBECTL} apply -f kubernetes/pgadmin/pgadmin-service.yaml
                    ${KUBECTL} apply -f kubernetes/pgadmin/pgadmin-ingress.yaml

                    ${KUBECTL} apply -f kubernetes/wordpress/wordpress-pvc.yaml
                    ${KUBECTL} apply -f kubernetes/wordpress/wordpress-deployment.yaml
                    ${KUBECTL} apply -f kubernetes/wordpress/wordpress-service.yaml
                    ${KUBECTL} apply -f kubernetes/wordpress/wordpress-hpa.yaml
                    ${KUBECTL} apply -f kubernetes/wordpress/wordpress-ingress.yaml
                '''
            }
        }
    }

    post {
        success {
            echo '✅ Pipeline completed successfully.'
        }
        failure {
            echo '❌ Pipeline failed.'
        }
        cleanup {
            sh 'rm -f kubectl'
        }
    }
}
